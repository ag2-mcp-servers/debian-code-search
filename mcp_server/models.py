# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:15:30+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class SearchResult(BaseModel):
    context: str = Field(
        ...,
        description='The full line containing the search result.',
        examples=['        i3Font cursor_font = load_font("cursor", false);'],
    )
    context_after: Optional[List[str]] = Field(
        None,
        description='Up to 2 full lines after the search result (see `context`).',
        examples=[['        xcb_create_glyph_cursor(', '            xcb_connection,']],
    )
    context_before: Optional[List[str]] = Field(
        None,
        description='Up to 2 full lines before the search result (see `context`).',
        examples=[
            ['    } else {', '        cursor = xcb_generate_id(xcb_connection);']
        ],
    )
    line: int = Field(
        ..., description='Line number containing the search result.', examples=[1313]
    )
    package: str = Field(
        ...,
        description='The Debian source package containing this search result, including the full Debian version number.',
        examples=['i3-wm_4.18-1'],
    )
    path: str = Field(
        ...,
        description='Path to the file containing the this search result, starting with `package`.',
        examples=['i3bar/src/xcb.c'],
    )


class MatchMode(Enum):
    literal = 'literal'
    regexp = 'regexp'


class SearchGetResponse(RootModel[List[SearchResult]]):
    root: List[SearchResult]


class PackageSearchResult(BaseModel):
    package: str = Field(
        ...,
        description='The Debian source package for which up to 2 search results have been aggregated in `results`.',
        examples=['i3-wm_4.18-1'],
    )
    results: List[SearchResult]


class SearchperpackageGetResponse(RootModel[List[PackageSearchResult]]):
    root: List[PackageSearchResult]
