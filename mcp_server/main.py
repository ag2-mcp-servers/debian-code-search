# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:15:30+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import MatchMode, SearchGetResponse, SearchperpackageGetResponse

app = MCPProxy(
    contact={'email': 'stapelberg@debian.org'},
    description='OpenAPI for https://codesearch.debian.net/',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Debian Code Search',
    version='1.4.0',
    servers=[{'url': 'https://codesearch.debian.net/api/v1'}],
)


@app.get(
    '/search',
    description=""" Performs a search through the full Debian Code Search corpus, blocking until all results are available (might take a few seconds depending on the search query).

Search results are ordered by their ranking (best results come first). """,
    tags=['code_search_operations'],
    security=[
        APIKeyHeader(name="x-dcs-apikey"),
    ],
)
def search(query: str, match_mode: Optional[MatchMode] = 'regexp'):
    """
    Searches through source code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/searchperpackage',
    description=""" The search results are currently sorted arbitrarily, but we intend to sort them by ranking eventually: https://github.com/Debian/dcs/blob/51338e934eb7ee18d00c5c18531c0790a83cb698/cmd/dcs-web/querymanager.go#L719 """,
    tags=['code_search_operations'],
    security=[
        APIKeyHeader(name="x-dcs-apikey"),
    ],
)
def searchperpackage(query: str, match_mode: Optional[MatchMode] = 'regexp'):
    """
    Like /search, but aggregates per package
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
